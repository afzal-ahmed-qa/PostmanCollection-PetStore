{
	"info": {
		"_postman_id": "39927093-bb26-48c1-9d40-bd2b235226b7",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27547625"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "1. Add a new pet to the store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random values\r",
									"const randomId = Math.floor(Math.random() * 1000000);\r",
									"const randomCategoryId = Math.floor(Math.random() * 1000);\r",
									"const randomTagId1 = Math.floor(Math.random() * 1000);\r",
									"const randomTagId2 = Math.floor(Math.random() * 1000);\r",
									"\r",
									"const randomName = `Pet-${Math.random().toString(36).substring(2, 7)}`;\r",
									"const randomCategoryName = `Category-${Math.random().toString(36).substring(2, 7)}`;\r",
									"const randomTagName1 = `Tag-${Math.random().toString(36).substring(2, 7)}`;\r",
									"const randomTagName2 = `Tag-${Math.random().toString(36).substring(2, 7)}`;\r",
									"const randomPhotoUrl1 = `https://example.com/photo/${Math.random().toString(36).substring(2, 10)}`;\r",
									"const randomPhotoUrl2 = `https://example.com/photo/${Math.random().toString(36).substring(2, 10)}`;\r",
									"\r",
									"// Save the values as environment variables\r",
									"pm.environment.set(\"randomId\", randomId);\r",
									"pm.environment.set(\"randomCategoryId\", randomCategoryId);\r",
									"pm.environment.set(\"randomTagId1\", randomTagId1);\r",
									"pm.environment.set(\"randomTagId2\", randomTagId2);\r",
									"\r",
									"pm.environment.set(\"randomName\", randomName);\r",
									"pm.environment.set(\"randomCategoryName\", randomCategoryName);\r",
									"pm.environment.set(\"randomTagName1\", randomTagName1);\r",
									"pm.environment.set(\"randomTagName2\", randomTagName2);\r",
									"\r",
									"pm.environment.set(\"randomPhotoUrl1\", randomPhotoUrl1);\r",
									"pm.environment.set(\"randomPhotoUrl2\", randomPhotoUrl2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save the pet id from the response into the environment variable \"petId\"\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"petId\", jsonData.id);\r",
									"// Test 1: Check if the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 1: Check if the status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the structure of the response body\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"category\").that.is.an(\"object\");\r",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"photoUrls\").that.is.an(\"array\");\r",
									"    pm.expect(jsonData).to.have.property(\"tags\").that.is.an(\"array\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test 3: Check if category object is not empty\r",
									"pm.test(\"Category object is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.category).to.be.an(\"object\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test 4: Check if photoUrls array is not empty\r",
									"pm.test(\"photoUrls array is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.photoUrls).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test 5: Check if tags array is not empty\r",
									"pm.test(\"Tags array is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tags).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Test 6: Check if status is \"sold\"\r",
									"pm.test(\"Status is 'sold'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
									"});\r",
									"\r",
									"// Test 7: Save the pet id in the environment for future use\r",
									"pm.test(\"Save petId in environment variable\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.environment.set(\"petId\", jsonData.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{randomName}}_Afzal\",\n  \"photoUrls\": [\n    \"{{randomPhotoUrl1}}\",\n    \"{{randomPhotoUrl2}}\"\n  ],\n  \"id\": {{randomId}},\n  \"category\": {\n    \"id\": {{randomCategoryId}},\n    \"name\": \"{{randomCategoryName}}\"\n  },\n  \"tags\": [\n    {\n      \"id\": {{randomTagId1}},\n      \"name\": \"{{randomTagName1}}\"\n    },\n    {\n      \"id\": {{randomTagId2}},\n      \"name\": \"{{randomTagName2}}\"\n    }\n  ],\n  \"status\": \"sold\"\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Verify that this pet/:petId has response code i 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the structure of the response body\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    // Verify that 'id' is a number\r",
									"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    \r",
									"    // Verify that 'category' is an object and contains 'id' and 'name' (irrespective of values)\r",
									"    pm.expect(jsonData).to.have.property(\"category\").that.is.an(\"object\");\r",
									"    pm.expect(jsonData.category).to.have.property(\"id\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData.category).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"    // Verify that 'name' is a string\r",
									"    pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"    // Verify that 'photoUrls' is an array\r",
									"    pm.expect(jsonData).to.have.property(\"photoUrls\").that.is.an(\"array\");\r",
									"\r",
									"    // Verify that 'tags' is an array of objects, each with 'id' and 'name' properties\r",
									"    pm.expect(jsonData).to.have.property(\"tags\").that.is.an(\"array\");\r",
									"    jsonData.tags.forEach(tag => {\r",
									"        pm.expect(tag).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(tag).to.have.property(\"name\").that.is.a(\"string\");\r",
									"    });\r",
									"\r",
									"    // Verify that 'status' is a string\r",
									"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petId}}",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "3. Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencodedA"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Mustafa",
									"description": "Updated name of the pet"
								},
								{
									"key": "status",
									"value": "active",
									"description": "Updated status of the pet"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Finds Pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test 3: Verify each item in the array has the correct structure\r",
									"pm.test(\"Each item in the array has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(item => {\r",
									"        // Verify 'id' is a number\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"\r",
									"        // Verify 'category' is an object and has 'id' and 'name'\r",
									"        pm.expect(item).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(item.category).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item.category).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"        // Verify 'name' is a string\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"        // Verify 'photoUrls' is an array\r",
									"        pm.expect(item).to.have.property(\"photoUrls\").that.is.an(\"array\");\r",
									"\r",
									"        // Verify 'tags' is an array of objects, each having 'id' and 'name'\r",
									"        pm.expect(item).to.have.property(\"tags\").that.is.an(\"array\");\r",
									"        item.tags.forEach(tag => {\r",
									"            pm.expect(tag).to.have.property(\"id\").that.is.a(\"number\");\r",
									"            pm.expect(tag).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        });\r",
									"\r",
									"        // Verify 'status' is a string\r",
									"        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 4: Verify that 'status' value is 'active' in each item\r",
									"pm.test(\"Status is 'active' in each item\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.status).to.eql(\"active\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=active&status=active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "active",
									"description": "(Required) Status values that need to be considered for filter"
								},
								{
									"key": "status",
									"value": "active",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "5. uploads an image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response structure and key types\r",
									"pm.test(\"Response structure is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Verify that 'code' is a number\r",
									"    pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\r",
									"\r",
									"    // Verify that 'type' is a string\r",
									"    pm.expect(jsonData).to.have.property(\"type\").that.is.a(\"string\");\r",
									"\r",
									"    // Verify that 'message' is a string\r",
									"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify the 'code' value is 200\r",
									"pm.test(\"Code is 200\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"});\r",
									"\r",
									"// Test 4: Verify the 'type' value is 'unknown'\r",
									"pm.test(\"Type is 'unknown'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
									"});\r",
									"\r",
									"// Test 5: Verify the 'message' contains 'additionalMetadata'\r",
									"pm.test(\"Message contains 'additionalMetadata'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"additionalMetadata\");\r",
									"});\r",
									"\r",
									"// Test 6: Verify the 'message' contains file upload details\r",
									"pm.test(\"Message contains file upload details\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"File uploaded to\");\r",
									"    pm.expect(jsonData.message).to.include(\"bytes\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalMetadata",
									"value": "<string>",
									"description": "Additional data to pass to server",
									"type": "text"
								},
								{
									"key": "file",
									"description": "file to upload",
									"type": "file",
									"src": "/C:/Users/user/Desktop/New Pics/afzaal pics/IMG_20120226_121620 - Kopie.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId/uploadImage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId",
								"uploadImage"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petId}}",
									"description": "(Required) ID of pet to update"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Finds Pets by tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test 3: Verify each item in the array has the correct structure\r",
									"pm.test(\"Each item in the array has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    jsonData.forEach(item => {\r",
									"        // Verify 'id' is a number\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
									"\r",
									"        // Verify 'category' is an object and has 'id' and 'name'\r",
									"        pm.expect(item).to.have.property(\"category\").that.is.an(\"object\");\r",
									"        pm.expect(item.category).to.have.property(\"id\").that.is.a(\"number\");\r",
									"        pm.expect(item.category).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"        // Verify 'name' is a string\r",
									"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
									"\r",
									"        // Verify 'photoUrls' is an array\r",
									"        pm.expect(item).to.have.property(\"photoUrls\").that.is.an(\"array\");\r",
									"\r",
									"        // Verify 'tags' is an array of objects, each having 'id' and 'name'\r",
									"        pm.expect(item).to.have.property(\"tags\").that.is.an(\"array\");\r",
									"        item.tags.forEach(tag => {\r",
									"            pm.expect(tag).to.have.property(\"id\").that.is.a(\"number\");\r",
									"            pm.expect(tag).to.have.property(\"name\").that.is.a(\"string\");\r",
									"        });\r",
									"\r",
									"        // Verify 'status' is a string\r",
									"        pm.expect(item).to.have.property(\"status\").that.is.a(\"string\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 4: Verify that 'status' value is 'active' in each item\r",
									"pm.test(\"Status is 'active' in each item\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.status).to.eql(\"active\");\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Verify the correct 'name' value in each item\r",
									"pm.test(\"Name is correct in each item\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.name).to.eql(\"Mustafa\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByTags?tags={{randomTagName1}}&tags={{randomTagId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByTags"
							],
							"query": [
								{
									"key": "tags",
									"value": "{{randomTagName1}}",
									"description": "(Required) Tags to filter by"
								},
								{
									"key": "tags",
									"value": "{{randomTagId2}}",
									"description": "(Required) Tags to filter by"
								}
							]
						},
						"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
					},
					"response": []
				},
				{
					"name": "7. Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"curl -X 'DELETE' \\\r",
									"  'https://petstore.swagger.io/v2/pet/100' \\\r",
									"  -H 'accept: application/json'"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petId}}",
									"description": "(Required) Pet id to delete"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "inventory",
					"item": [
						{
							"name": "Returns pet inventories by status",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								},
								"description": "Returns a map of status codes to quantities"
							},
							"response": []
						}
					]
				},
				{
					"name": "order",
					"item": [
						{
							"name": "{orderId}",
							"item": [
								{
									"name": "Find purchase order by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1: Verify response status code is 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Test 2: Verify the response structure and types\r",
													"pm.test(\"Response structure is valid\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
													"    pm.expect(jsonData).to.have.property(\"petId\").that.is.a(\"number\");\r",
													"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\");\r",
													"    pm.expect(jsonData).to.have.property(\"shipDate\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"complete\").that.is.a(\"boolean\");\r",
													"});\r",
													"\r",
													"// Test 3: Verify specific values\r",
													"pm.test(\"Verify specific values in response\", function () {\r",
													"    pm.expect(jsonData.id).to.eql(12345);\r",
													"    pm.expect(jsonData.petId).to.eql(67890);\r",
													"    pm.expect(jsonData.quantity).to.eql(3);\r",
													"    pm.expect(jsonData.status).to.eql(\"approved\");\r",
													"    pm.expect(jsonData.complete).to.be.true;\r",
													"});\r",
													"\r",
													"// Test 4: Validate shipDate format and future date\r",
													"pm.test(\"Ship date is valid and in the future\", function () {\r",
													"    const shipDate = new Date(jsonData.shipDate);\r",
													"    const currentDate = new Date();\r",
													"\r",
													"    // Verify shipDate is a valid date\r",
													"    pm.expect(shipDate.toString()).to.not.eql(\"Invalid Date\");\r",
													"\r",
													"    // Verify shipDate is in the future\r",
													"    pm.expect(shipDate.getTime()).to.be.greaterThan(currentDate.getTime());\r",
													"});\r",
													"\r",
													"// Test 5: Verify no unexpected fields in the response\r",
													"pm.test(\"Response contains no unexpected fields\", function () {\r",
													"    const expectedKeys = [\"id\", \"petId\", \"quantity\", \"shipDate\", \"status\", \"complete\"];\r",
													"    const responseKeys = Object.keys(jsonData);\r",
													"\r",
													"    // Verify the response has only the expected keys\r",
													"    pm.expect(responseKeys.sort()).to.eql(expectedKeys.sort());\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "orderId",
													"value": "12345",
													"description": "(Required) ID of pet that needs to be fetched"
												}
											]
										},
										"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}"
										},
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete purchase order by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test 1: Verify response status code is 200\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Parse the response body as JSON\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"// Test 2: Verify the response structure and data types\r",
													"pm.test(\"Response structure is valid\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\r",
													"    pm.expect(jsonData).to.have.property(\"type\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"// Test 3: Verify specific values\r",
													"pm.test(\"Verify specific values in response\", function () {\r",
													"    pm.expect(jsonData.code).to.eql(200);       // Verify 'code' value\r",
													"    pm.expect(jsonData.type).to.eql(\"unknown\"); // Verify 'type' value\r",
													"    pm.expect(jsonD\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "12345",
													"description": "(Required) ID of the order that needs to be deleted"
												}
											]
										},
										"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
									},
									"response": [
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify the response status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the JSON response body\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Test 2: Verify the response structure and key types\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    // Verify 'id' is a number\r",
											"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
											"\r",
											"    // Verify 'petId' is a number\r",
											"    pm.expect(jsonData).to.have.property(\"petId\").that.is.a(\"number\");\r",
											"\r",
											"    // Verify 'quantity' is a number\r",
											"    pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\");\r",
											"\r",
											"    // Verify 'shipDate' is a string and in valid date-time format\r",
											"    pm.expect(jsonData).to.have.property(\"shipDate\").that.is.a(\"string\");\r",
											"    pm.expect(new Date(jsonData.shipDate).toISOString()).to.be.a(\"string\");\r",
											"\r",
											"    // Verify 'status' is a string\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"\r",
											"    // Verify 'complete' is a boolean\r",
											"    pm.expect(jsonData).to.have.property(\"complete\").that.is.a(\"boolean\");\r",
											"});\r",
											"\r",
											"// Test 3: Verify specific values (if applicable)\r",
											"pm.test(\"Verify specific values\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(12345); // Verify 'id'\r",
											"    pm.expect(jsonData.petId).to.eql(67890); // Verify 'petId'\r",
											"    pm.expect(jsonData.quantity).to.eql(3); // Verify 'quantity'\r",
											"    pm.expect(jsonData.status).to.eql(\"approved\"); // Verify 'status'\r",
											"    pm.expect(jsonData.complete).to.be.true; // Verify 'complete'\r",
											"});\r",
											"\r",
											"// Test 4: Verify 'shipDate' is in the future\r",
											"pm.test(\"Ship date is in the future\", function () {\r",
											"    const currentDate = new Date();\r",
											"    const shipDate = new Date(jsonData.shipDate);\r",
											"    pm.expect(shipDate.getTime()).to.be.greaterThan(currentDate.getTime());\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": 12345,\n  \"petId\": 67890,\n  \"quantity\": 3,\n  \"shipDate\": \"2024-11-18T10:30:00Z\",\n  \"status\": \"approved\",\n  \"complete\": true\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order?=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "{username}",
					"item": [
						{
							"name": "Get user by user name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify Status Code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Verify Response Body Structure\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"password\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"phone\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"userStatus\").that.is.a(\"number\");\r",
											"});\r",
											"\r",
											"// 3. Verify Specific Field Values\r",
											"pm.test(\"Response values match expected\", function () {\r",
											"    pm.expect(jsonData.id).to.eql(101);\r",
											"    pm.expect(jsonData.username).to.eql(\"Afzal\");\r",
											"    pm.expect(jsonData.firstName).to.eql(\"Afzal\");\r",
											"    pm.expect(jsonData.lastName).to.eql(\"Ahmed\");\r",
											"    pm.expect(jsonData.email).to.eql(\"afzal.ahmed0913@gmail.com\");\r",
											"    pm.expect(jsonData.password).to.eql(\"SecurePass123!\");\r",
											"    pm.expect(jsonData.phone).to.eql(\"+1234567890\");\r",
											"    pm.expect(jsonData.userStatus).to.eql(1);\r",
											"});\r",
											"\r",
											"// 4. Verify Email is Valid\r",
											"pm.test(\"Email is valid\", function () {\r",
											"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
											"    pm.expect(jsonData.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"// 5. Verify Phone Number Format\r",
											"pm.test(\"Phone number is valid\", function () {\r",
											"    const phoneRegex = /^\\+\\d{10,}$/; // Ensure the phone number starts with a + followed by digits.\r",
											"    pm.expect(jsonData.phone).to.match(phoneRegex);\r",
											"});\r",
											"\r",
											"// 6. Check User Status is Active\r",
											"pm.test(\"User status is active\", function () {\r",
											"    pm.expect(jsonData.userStatus).to.eql(1);\r",
											"});\r",
											"\r",
											"// 7. Ensure No Unexpected Fields\r",
											"pm.test(\"Response contains no unexpected fields\", function () {\r",
											"    const expectedKeys = [\"id\", \"username\", \"firstName\", \"lastName\", \"email\", \"password\", \"phone\", \"userStatus\"];\r",
											"    const responseKeys = Object.keys(jsonData);\r",
											"\r",
											"    pm.expect(responseKeys.sort()).to.eql(expectedKeys.sort());\r",
											"});\r",
											"\r",
											"// 8. Verify Password Length\r",
											"pm.test(\"Password length is valid\", function () {\r",
											"    pm.expect(jsonData.password.length).to.be.above(8);  // Ensure password length is more than 8 characters\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Afzal",
											"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
								},
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify Status Code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Verify Response Body Structure\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// 3. Verify Specific Field Values\r",
											"pm.test(\"Response values match expected\", function () {\r",
											"    pm.expect(jsonData.code).to.eql(200);\r",
											"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
											"    pm.expect(jsonData.message).to.eql(\"Afzal\");\r",
											"});\r",
											"\r",
											"// 4. Ensure No Unexpected Fields\r",
											"pm.test(\"Response contains no unexpected fields\", function () {\r",
											"    const expectedKeys = [\"code\", \"type\", \"message\"];\r",
											"    const responseKeys = Object.keys(jsonData);\r",
											"\r",
											"    pm.expect(responseKeys.sort()).to.eql(expectedKeys.sort());\r",
											"});\r",
											"\r",
											"// 5. Verify `code` is a valid status code\r",
											"pm.test(\"Code is a valid status code\", function () {\r",
											"    pm.expect(jsonData.code).to.be.oneOf([200, 201, 400, 404, 500]);\r",
											"});\r",
											"\r",
											"// 6. Verify `message` is not empty\r",
											"pm.test(\"Message is not empty\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// 7. Check `type` is a valid string\r",
											"pm.test(\"Type is a valid string\", function () {\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username",
											"value": "Afzal",
											"description": "(Required) The name that needs to be deleted"
										}
									]
								},
								"description": "This can only be done by the logged in user."
							},
							"response": [
								{
									"name": "Invalid username supplied",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/:username",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												":username"
											],
											"variable": [
												{
													"key": "username"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "createWithList",
					"item": [
						{
							"name": "Creates list of users with given input array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify Status Code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Verify Response Body Structure\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// 3. Verify Specific Field Values\r",
											"pm.test(\"Response values match expected\", function () {\r",
											"    pm.expect(jsonData.code).to.eql(200);\r",
											"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
											"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
											"});\r",
											"\r",
											"// 4. Ensure No Unexpected Fields\r",
											"pm.test(\"Response contains no unexpected fields\", function () {\r",
											"    const expectedKeys = [\"code\", \"type\", \"message\"];\r",
											"    const responseKeys = Object.keys(jsonData);\r",
											"\r",
											"    pm.expect(responseKeys.sort()).to.eql(expectedKeys.sort());\r",
											"});\r",
											"\r",
											"// 5. Verify `code` is a valid status code\r",
											"pm.test(\"Code is a valid status code\", function () {\r",
											"    pm.expect(jsonData.code).to.be.oneOf([200, 201, 400, 404, 500]);\r",
											"});\r",
											"\r",
											"// 6. Verify `message` is not empty\r",
											"pm.test(\"Message is not empty\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// 7. Check `type` is a valid string\r",
											"pm.test(\"Type is a valid string\", function () {\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": 101,\n    \"username\": \"Musa\",\n    \"firstName\": \"Musa\",\n    \"lastName\": \"Ahmed\",\n    \"email\": \"Musa.ahmed@example.com\",\n    \"password\": \"Password123!\",\n    \"phone\": \"+1234567890\",\n    \"userStatus\": 1\n  },\n  {\n    \"id\": 102,\n    \"username\": \"Mustafa\",\n    \"firstName\": \"Mustafa\",\n    \"lastName\": \"Ahmed\",\n    \"email\": \"Mustafa.Ahmed@example.com\",\n    \"password\": \"SecurePass456!\",\n    \"phone\": \"+1987654321\",\n    \"userStatus\": 1\n  },\n  {\n    \"id\": 103,\n    \"username\": \"michael_jones\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jones\",\n    \"email\": \"michael.jones@example.com\",\n    \"password\": \"MyPass7890!\",\n    \"phone\": \"+1122334455\",\n    \"userStatus\": 0\n  },\n  {\n    \"id\": 104,\n    \"username\": \"susan_white\",\n    \"firstName\": \"Susan\",\n    \"lastName\": \"White\",\n    \"email\": \"susan.white@example.com\",\n    \"password\": \"Susie1234!\",\n    \"phone\": \"+1444332211\",\n    \"userStatus\": 1\n  },\n  {\n    \"id\": 105,\n    \"username\": \"james_brown\",\n    \"firstName\": \"James\",\n    \"lastName\": \"Brown\",\n    \"email\": \"james.brown@example.com\",\n    \"password\": \"Brownie5678!\",\n    \"phone\": \"+1555666777\",\n    \"userStatus\": 0\n  }\n]\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithList",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithList"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/createWithList",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"createWithList"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Logs user into the system",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=Musa&password=Password123!",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "Musa",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "Password123!",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The user name for login"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) The password for login in clear text"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "X-Expires-After",
											"value": "<dateTime>",
											"description": {
												"content": "date in UTC when token expires",
												"type": "text/plain"
											}
										},
										{
											"key": "X-Rate-Limit",
											"value": "<integer>",
											"description": {
												"content": "calls per hour allowed by the user",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "<string>"
								},
								{
									"name": "Invalid username/password supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"login"
											],
											"query": [
												{
													"key": "username",
													"value": "<string>",
													"description": "(Required) The user name for login"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) The password for login in clear text"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "Logs out current logged in user session",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/user/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"logout"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "createWithArray",
					"item": [
						{
							"name": "Creates list of users with given input array",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify Status Code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Verify Response Body Structure\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"code\").that.is.a(\"number\");\r",
											"    pm.expect(jsonData).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// 3. Verify Specific Field Values\r",
											"pm.test(\"Response values match expected\", function () {\r",
											"    pm.expect(jsonData.code).to.eql(200);\r",
											"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
											"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
											"});\r",
											"\r",
											"// 4. Ensure No Unexpected Fields\r",
											"pm.test(\"Response contains no unexpected fields\", function () {\r",
											"    const expectedKeys = [\"code\", \"type\", \"message\"];\r",
											"    const responseKeys = Object.keys(jsonData);\r",
											"\r",
											"    pm.expect(responseKeys.sort()).to.eql(expectedKeys.sort());\r",
											"});\r",
											"\r",
											"// 5. Verify `code` is a valid status code\r",
											"pm.test(\"Code is a valid status code\", function () {\r",
											"    pm.expect(jsonData.code).to.be.oneOf([200, 201, 400, 404, 500]);\r",
											"});\r",
											"\r",
											"// 6. Verify `message` is not empty\r",
											"pm.test(\"Message is not empty\", function () {\r",
											"    pm.expect(jsonData.message).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// 7. Check `type` is a valid string\r",
											"pm.test(\"Type is a valid string\", function () {\r",
											"    pm.expect(jsonData.type).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"id\": 101,\n    \"username\": \"musa_ahmed\",\n    \"firstName\": \"Musa\",\n    \"lastName\": \"Ahmed\",\n    \"email\": \"musa.ahmed@example.com\",\n    \"password\": \"MusaPass123!\",\n    \"phone\": \"+1234567890\",\n    \"userStatus\": 1\n  },\n  {\n    \"id\": 102,\n    \"username\": \"mustafa_ahmed\",\n    \"firstName\": \"Mustafa\",\n    \"lastName\": \"Ahmed\",\n    \"email\": \"mustafa.ahmed@example.com\",\n    \"password\": \"MustafaPass123!\",\n    \"phone\": \"+1987654321\",\n    \"userStatus\": 1\n  }\n]\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/createWithArray",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"createWithArray"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 101, \n  \"username\": \"Afzal\",\n  \"firstName\": \"Afzal\",\n  \"lastName\": \"Ahmed\",\n  \"email\": \"afzal.ahmed0913@gmail.com\",\n  \"password\": \"SecurePass123!\",\n  \"phone\": \"+1234567890\",\n  \"userStatus\": 1\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user?=&=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "",
									"value": ""
								},
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		}
	]
}